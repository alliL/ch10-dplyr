setwd("C:/Users/allic/Desktop/info201/a3-using-data-alliL")
setwd("C:/Users/allic/Desktop/info201/ch10-dplyr/exercise-1")
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles$make
manufacturers
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
num_manufacturers <- unique(manufacturers)
num_manufacturers
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
num_manufacturers <- length(unique(manufacturers))
num_manufacturers
setwd("C:/Users/allic/Desktop/info201/ch9-data-frames/exercise-5")
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('data/female_names.csv', stringsAsFactors=FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == 2013,]
View(names)
# What was the most popular female name in 2013?
popular <- names_2013[names_2013$prop == max(names_2013$prop), "name"]
# What was the most popular female name in 2013?
popular <- names_2013[max(names_2013$prop), "name"]
# What was the most popular female name in 2013?
popular <- names_2013[names_2013$prop == max(names_2013$prop), "name"]
most_popular_in_year <- function(year) {
names_year <- names[names$year == year]
names_year[names_year == max(names_year$prop), "name"]
}
most_popular_in_year <- function(y) {
names_year <- names[names$year == y]
names_year[names_year == max(names_year$prop), "name"]
}
# What was the most popular female name in 1994?
popular_1994 <- most_popular_in_year(1994)
most_popular_in_year <- function(y) {
names_year <- names[names$year == y,]
names_year[names_year == max(names_year$prop), "name"]
}
# What was the most popular female name in 1994?
popular_1994 <- most_popular_in_year(1994)
most_popular_in_year <- function(y) {
names_year <- names[names$year == y,]
name <- names_year[names_year == max(names_year$prop), "name"]
name
}
# What was the most popular female name in 1994?
popular_1994 <- most_popular_in_year(1994)
most_popular_in_year <- function(y) {
names_year <- names[names$year == y,]
names_year[names_year$prop == max(names_year$prop), "name"]
}
# What was the most popular female name in 1994?
popular_1994 <- most_popular_in_year(1994)
number_in_million <- function(n, y) {
proportion <- names[names$name == n & names$year == y, "prop"]
round(proportion * 1000000, 1)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
laura_babies <- number_in_million("Laura", 1995)
# How many babies out of 1 million had your name in the year you were born?
allison_babies <- number_in_million("Allison", 1998)
number_in_million <- function(name, year) {
name_popularity <- names[names$year == year & names$name == name, 'prop']
round(name_popularity*1000000, 1)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million('Laura', 1995)
setwd("C:/Users/allic/Desktop/info201/ch10-dplyr/exercise-1")
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
num_manufacturers <- length(unique(manufacturers))
# Filter the data set for vehicles manufactured in 1997
manufactured_1997 <- vehicles[vehicles$year == 1997, ]
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- vehicles[vehicles$year == 1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997 <- cars_1997[order(cars_1997$hwy), ]
View(cars_1997)
View(cars_1997)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997$average = (cars_1997$hwy + cars_1997$cty) / 2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
sub_data <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$city > 20,]
View(sub_data)
View(sub_data)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
sub_data <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty > 20,]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy_mpg <- sub_data[sub_data$hwy == min(sub_data$hwy), id]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy_mpg <- sub_data[sub_data$hwy == min(sub_data$hwy), "id"]
worst_hwy <- two_wheel_20_mpg$id[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy)]
worst_hwy <- sub_data$id[sub_data$hwy == min(sub_data$hwy)]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy_mpg <- sub_data[sub_data$hwy == min(sub_data$hwy), "id"]
best_vehicle <- function(year_choice, make_choice) {
cars_year <- vehicles[vehicles$year == year_choice && vehicles$make == make_choice,]
model <- cars_year$model[cars_year$hwy == max(cars_year$hwy)]
model
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, "Honda")
model <- cars_year[cars_year$hwy == max(cars_year$hwy), "model"]
best_vehicle <- function(year_choice, make_choice) {
cars_year <- vehicles[vehicles$year == year_choice && vehicles$make == make_choice,]
model <- cars_year[cars_year$hwy == max(cars_year$hwy), "model"]
model
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, "Honda")
best_vehicle <- function(year_choice, make_choice) {
cars_year <- vehicles[vehicles$year == year_choice && vehicles$make == make_choice,]
cars_year[cars_year$hwy == max(cars_year$hwy), "model"]
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, "Honda")
make_year_filter <- function(make_choice, year_choice) {
filtered <- vehicles[vehicles$make == make_choice & vehicles$year == year_choice, ]
filtered[filtered$hwy == max(filtered$hwy), 'model']
}
# What was the most efficient Honda model of 1995?
make_year_filter('Honda', 1995)
# What was the most efficient Honda model of 1995?
temp <- best_vehicle(1995, "Honda")
best_vehicle <- function(year_choice, make_choice) {
cars_year <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice,]
cars_year[cars_year$hwy == max(cars_year$hwy), "model"]
}
# What was the most efficient Honda model of 1995?
temp <- best_vehicle(1995, "Honda")
# What was the most efficient Honda model of 1995?
best_vehicle(1995, "Honda")
